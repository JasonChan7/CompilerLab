Terminals unused in grammar

   IFX


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    4 my_proc_predecls: MYBEGIN proc_predecls END
    5                 | %empty

    6 get_code_addr: %empty

    7 get_table_addr: %empty

    8 open_globallocalswitch: %empty

    9 close_globallocalswitch: %empty

   10 get_globallocalswitch: %empty

   11 proc_predecls: proc_predecls increase_procRecord proc_decl decrease_level
   12              | %empty

   13 const_decl: CONST const_list ';'
   14           | %empty

   15 const_list: const_def
   16           | const_list ',' const_def

   17 const_def: IDENT BC INTEGER

   18 var_decl: VAR var_list ';'
   19         | %empty

   20 var_list: var_def
   21         | var_list ',' var_def

   22 var_def: IDENT

   23 $@3: %empty

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level
   25           | %empty

   26 $@4: %empty

   27 return_stmt: $@4 RET expr ';'

   28 proc_decl: PROC IDENT increase_level '(' para_list ')' ';' get_globallocalswitch get_code_addr

   29 para_list: para_stmt
   30          | %empty

   31 para_stmt: IDENT
   32          | IDENT ',' para_stmt

   33 increase_procRecord: %empty

   34 decrease_level: %empty

   35 increase_level: %empty

   36 stmt_sequence: stmt_sequence ';' statement
   37              | statement

   38 statement: if_stmt
   39          | repeat_stmt
   40          | assign_stmt
   41          | read_stmt
   42          | write_stmt
   43          | while_stmt
   44          | dowhile_stmt
   45          | call_stmt
   46          | return_stmt
   47          | for_stmt

   48 if_stmt: if_stmt_no_else END

   49 $@5: %empty

   50 if_stmt: if_stmt_no_else get_code_addr $@5 ELSE stmt_sequence ';' END

   51 @6: %empty

   52 if_stmt_no_else: IF expr get_code_addr @6 THEN stmt_sequence ';'

   53 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL expr

   54 assign_stmt: identifier BC expr
   55            | identifier INC
   56            | identifier DEC

   57 read_stmt: READ identifier

   58 write_stmt: WRITE expr

   59 $@7: %empty

   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 DO MYBEGIN stmt_sequence END

   61 dowhile_stmt: DO get_code_addr stmt_sequence WHILE expr

   62 $@8: %empty

   63 $@9: %empty

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

   65 call_stmt: CALL get_table_addr proc_identifier '(' arg_list ')'

   66 arg_list: arg_stmt
   67         | %empty

   68 arg_stmt: expr
   69         | arg_stmt ',' expr

   70 expr: simple_expr
   71     | ODD simple_expr
   72     | simple_expr EQ simple_expr
   73     | simple_expr NE simple_expr
   74     | simple_expr LT simple_expr
   75     | simple_expr GE simple_expr
   76     | simple_expr GT simple_expr
   77     | simple_expr LE simple_expr

   78 simple_expr: '-' simple_expr
   79            | simple_expr '+' simple_expr
   80            | simple_expr '-' simple_expr
   81            | simple_expr '*' simple_expr
   82            | simple_expr '/' simple_expr
   83            | simple_expr '%' simple_expr
   84            | simple_expr XOR simple_expr
   85            | '(' expr ')'
   86            | call_stmt
   87            | INTEGER
   88            | IDENT

   89 identifier: IDENT

   90 proc_identifier: IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37) 83
'(' (40) 28 64 65 85
')' (41) 28 64 65 85
'*' (42) 81
'+' (43) 79
',' (44) 16 21 32 69
'-' (45) 78 80
'/' (47) 82
';' (59) 13 18 24 27 28 36 50 52 53 64
error (256)
IDENT (258) 17 22 28 31 32 88 89 90
INTEGER (259) 17 87
IF (260) 52
THEN (261) 52
ELSE (262) 50
END (263) 4 24 48 50 60 64
REPEAT (264) 53
UNTIL (265) 53
READ (266) 57
WRITE (267) 58
CALL (268) 65
CONST (269) 13
VAR (270) 18
MYBEGIN (271) 4 24 60 64
XOR (272) 84
ODD (273) 71
PROC (274) 28
WHILE (275) 60 61
DO (276) 60 61
RET (277) 27
FOR (278) 64
IFX (279)
BC (280) 17 54
GT (281) 76
LT (282) 74
GE (283) 75
LE (284) 77
EQ (285) 72
NE (286) 73
INC (287) 55
DEC (288) 56
UMINUS (289)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
program (45)
    on left: 3, on right: 0
$@1 (46)
    on left: 1, on right: 3
$@2 (47)
    on left: 2, on right: 3
my_proc_predecls (48)
    on left: 4 5, on right: 3
get_code_addr (49)
    on left: 6, on right: 3 28 50 52 53 60 61 64
get_table_addr (50)
    on left: 7, on right: 65
open_globallocalswitch (51)
    on left: 8, on right: 3
close_globallocalswitch (52)
    on left: 9, on right: 3
get_globallocalswitch (53)
    on left: 10, on right: 28
proc_predecls (54)
    on left: 11 12, on right: 4 11
const_decl (55)
    on left: 13 14, on right: 3 24
const_list (56)
    on left: 15 16, on right: 13 16
const_def (57)
    on left: 17, on right: 15 16
var_decl (58)
    on left: 18 19, on right: 3 24
var_list (59)
    on left: 20 21, on right: 18 21
var_def (60)
    on left: 22, on right: 20 21
proc_decls (61)
    on left: 24 25, on right: 3 24
$@3 (62)
    on left: 23, on right: 24
return_stmt (63)
    on left: 27, on right: 24 46
$@4 (64)
    on left: 26, on right: 27
proc_decl (65)
    on left: 28, on right: 11 24
para_list (66)
    on left: 29 30, on right: 28
para_stmt (67)
    on left: 31 32, on right: 29 32
increase_procRecord (68)
    on left: 33, on right: 3 11
decrease_level (69)
    on left: 34, on right: 11 24
increase_level (70)
    on left: 35, on right: 28
stmt_sequence (71)
    on left: 36 37, on right: 3 24 36 50 52 53 60 61 64
statement (72)
    on left: 38 39 40 41 42 43 44 45 46 47, on right: 36 37
if_stmt (73)
    on left: 48 50, on right: 38
$@5 (74)
    on left: 49, on right: 50
if_stmt_no_else (75)
    on left: 52, on right: 48 50
@6 (76)
    on left: 51, on right: 52
repeat_stmt (77)
    on left: 53, on right: 39
assign_stmt (78)
    on left: 54 55 56, on right: 40 64
read_stmt (79)
    on left: 57, on right: 41
write_stmt (80)
    on left: 58, on right: 42
while_stmt (81)
    on left: 60, on right: 43
$@7 (82)
    on left: 59, on right: 60
dowhile_stmt (83)
    on left: 61, on right: 44
for_stmt (84)
    on left: 64, on right: 47
$@8 (85)
    on left: 62, on right: 64
$@9 (86)
    on left: 63, on right: 64
call_stmt (87)
    on left: 65, on right: 45 86
arg_list (88)
    on left: 66 67, on right: 65
arg_stmt (89)
    on left: 68 69, on right: 66 69
expr (90)
    on left: 70 71 72 73 74 75 76 77, on right: 27 52 53 54 58 60 61
    64 68 69 85
simple_expr (91)
    on left: 78 79 80 81 82 83 84 85 86 87 88, on right: 70 71 72 73
    74 75 76 77 78 79 80 81 82 83 84
identifier (92)
    on left: 89, on right: 54 55 56 57
proc_identifier (93)
    on left: 90, on right: 65


State 0

    0 $accept: . program $end

    $default  reduce using rule 6 (get_code_addr)

    program        go to state 1
    get_code_addr  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: get_code_addr . $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    $default  reduce using rule 1 ($@1)

    $@1  go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: get_code_addr $@1 . open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    $default  reduce using rule 8 (open_globallocalswitch)

    open_globallocalswitch  go to state 5


State 5

    3 program: get_code_addr $@1 open_globallocalswitch . my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    MYBEGIN  shift, and go to state 6

    $default  reduce using rule 5 (my_proc_predecls)

    my_proc_predecls  go to state 7


State 6

    4 my_proc_predecls: MYBEGIN . proc_predecls END

    $default  reduce using rule 12 (proc_predecls)

    proc_predecls  go to state 8


State 7

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls . const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    CONST  shift, and go to state 9

    $default  reduce using rule 14 (const_decl)

    const_decl  go to state 10


State 8

    4 my_proc_predecls: MYBEGIN proc_predecls . END
   11 proc_predecls: proc_predecls . increase_procRecord proc_decl decrease_level

    END  shift, and go to state 11

    $default  reduce using rule 33 (increase_procRecord)

    increase_procRecord  go to state 12


State 9

   13 const_decl: CONST . const_list ';'

    IDENT  shift, and go to state 13

    const_list  go to state 14
    const_def   go to state 15


State 10

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl . var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    VAR  shift, and go to state 16

    $default  reduce using rule 19 (var_decl)

    var_decl  go to state 17


State 11

    4 my_proc_predecls: MYBEGIN proc_predecls END .

    $default  reduce using rule 4 (my_proc_predecls)


State 12

   11 proc_predecls: proc_predecls increase_procRecord . proc_decl decrease_level

    PROC  shift, and go to state 18

    proc_decl  go to state 19


State 13

   17 const_def: IDENT . BC INTEGER

    BC  shift, and go to state 20


State 14

   13 const_decl: CONST const_list . ';'
   16 const_list: const_list . ',' const_def

    ';'  shift, and go to state 21
    ','  shift, and go to state 22


State 15

   15 const_list: const_def .

    $default  reduce using rule 15 (const_list)


State 16

   18 var_decl: VAR . var_list ';'

    IDENT  shift, and go to state 23

    var_list  go to state 24
    var_def   go to state 25


State 17

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl . close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence

    $default  reduce using rule 9 (close_globallocalswitch)

    close_globallocalswitch  go to state 26


State 18

   28 proc_decl: PROC . IDENT increase_level '(' para_list ')' ';' get_globallocalswitch get_code_addr

    IDENT  shift, and go to state 27


State 19

   11 proc_predecls: proc_predecls increase_procRecord proc_decl . decrease_level

    $default  reduce using rule 34 (decrease_level)

    decrease_level  go to state 28


State 20

   17 const_def: IDENT BC . INTEGER

    INTEGER  shift, and go to state 29


State 21

   13 const_decl: CONST const_list ';' .

    $default  reduce using rule 13 (const_decl)


State 22

   16 const_list: const_list ',' . const_def

    IDENT  shift, and go to state 13

    const_def  go to state 30


State 23

   22 var_def: IDENT .

    $default  reduce using rule 22 (var_def)


State 24

   18 var_decl: VAR var_list . ';'
   21 var_list: var_list . ',' var_def

    ';'  shift, and go to state 31
    ','  shift, and go to state 32


State 25

   20 var_list: var_def .

    $default  reduce using rule 20 (var_list)


State 26

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch . proc_decls increase_procRecord $@2 stmt_sequence

    $default  reduce using rule 25 (proc_decls)

    proc_decls  go to state 33


State 27

   28 proc_decl: PROC IDENT . increase_level '(' para_list ')' ';' get_globallocalswitch get_code_addr

    $default  reduce using rule 35 (increase_level)

    increase_level  go to state 34


State 28

   11 proc_predecls: proc_predecls increase_procRecord proc_decl decrease_level .

    $default  reduce using rule 11 (proc_predecls)


State 29

   17 const_def: IDENT BC INTEGER .

    $default  reduce using rule 17 (const_def)


State 30

   16 const_list: const_list ',' const_def .

    $default  reduce using rule 16 (const_list)


State 31

   18 var_decl: VAR var_list ';' .

    $default  reduce using rule 18 (var_decl)


State 32

   21 var_list: var_list ',' . var_def

    IDENT  shift, and go to state 23

    var_def  go to state 35


State 33

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls . increase_procRecord $@2 stmt_sequence
   24 proc_decls: proc_decls . proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    PROC  shift, and go to state 18

    $default  reduce using rule 33 (increase_procRecord)

    proc_decl            go to state 36
    increase_procRecord  go to state 37


State 34

   28 proc_decl: PROC IDENT increase_level . '(' para_list ')' ';' get_globallocalswitch get_code_addr

    '('  shift, and go to state 38


State 35

   21 var_list: var_list ',' var_def .

    $default  reduce using rule 21 (var_list)


State 36

   24 proc_decls: proc_decls proc_decl . MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    MYBEGIN  shift, and go to state 39


State 37

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord . $@2 stmt_sequence

    $default  reduce using rule 2 ($@2)

    $@2  go to state 40


State 38

   28 proc_decl: PROC IDENT increase_level '(' . para_list ')' ';' get_globallocalswitch get_code_addr

    IDENT  shift, and go to state 41

    $default  reduce using rule 30 (para_list)

    para_list  go to state 42
    para_stmt  go to state 43


State 39

   24 proc_decls: proc_decls proc_decl MYBEGIN . const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    CONST  shift, and go to state 9

    $default  reduce using rule 14 (const_decl)

    const_decl  go to state 44


State 40

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 . stmt_sequence

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 56
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 41

   31 para_stmt: IDENT .
   32          | IDENT . ',' para_stmt

    ','  shift, and go to state 69

    $default  reduce using rule 31 (para_stmt)


State 42

   28 proc_decl: PROC IDENT increase_level '(' para_list . ')' ';' get_globallocalswitch get_code_addr

    ')'  shift, and go to state 70


State 43

   29 para_list: para_stmt .

    $default  reduce using rule 29 (para_list)


State 44

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl . var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    VAR  shift, and go to state 16

    $default  reduce using rule 19 (var_decl)

    var_decl  go to state 71


State 45

   89 identifier: IDENT .

    $default  reduce using rule 89 (identifier)


State 46

   52 if_stmt_no_else: IF . expr get_code_addr @6 THEN stmt_sequence ';'

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 78
    simple_expr  go to state 79


State 47

   53 repeat_stmt: REPEAT . get_code_addr stmt_sequence ';' UNTIL expr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 80


State 48

   57 read_stmt: READ . identifier

    IDENT  shift, and go to state 45

    identifier  go to state 81


State 49

   58 write_stmt: WRITE . expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 82
    simple_expr  go to state 79


State 50

   65 call_stmt: CALL . get_table_addr proc_identifier '(' arg_list ')'

    $default  reduce using rule 7 (get_table_addr)

    get_table_addr  go to state 83


State 51

   60 while_stmt: WHILE . get_code_addr expr get_code_addr $@7 DO MYBEGIN stmt_sequence END

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 84


State 52

   61 dowhile_stmt: DO . get_code_addr stmt_sequence WHILE expr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 85


State 53

   64 for_stmt: FOR . '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    '('  shift, and go to state 86


State 54

   46 statement: return_stmt .

    $default  reduce using rule 46 (statement)


State 55

   27 return_stmt: $@4 . RET expr ';'

    RET  shift, and go to state 87


State 56

    3 program: get_code_addr $@1 open_globallocalswitch my_proc_predecls const_decl var_decl close_globallocalswitch proc_decls increase_procRecord $@2 stmt_sequence .
   36 stmt_sequence: stmt_sequence . ';' statement

    ';'  shift, and go to state 88

    $default  reduce using rule 3 (program)


State 57

   37 stmt_sequence: statement .

    $default  reduce using rule 37 (stmt_sequence)


State 58

   38 statement: if_stmt .

    $default  reduce using rule 38 (statement)


State 59

   48 if_stmt: if_stmt_no_else . END
   50        | if_stmt_no_else . get_code_addr $@5 ELSE stmt_sequence ';' END

    END  shift, and go to state 89

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 90


State 60

   39 statement: repeat_stmt .

    $default  reduce using rule 39 (statement)


State 61

   40 statement: assign_stmt .

    $default  reduce using rule 40 (statement)


State 62

   41 statement: read_stmt .

    $default  reduce using rule 41 (statement)


State 63

   42 statement: write_stmt .

    $default  reduce using rule 42 (statement)


State 64

   43 statement: while_stmt .

    $default  reduce using rule 43 (statement)


State 65

   44 statement: dowhile_stmt .

    $default  reduce using rule 44 (statement)


State 66

   47 statement: for_stmt .

    $default  reduce using rule 47 (statement)


State 67

   45 statement: call_stmt .

    $default  reduce using rule 45 (statement)


State 68

   54 assign_stmt: identifier . BC expr
   55            | identifier . INC
   56            | identifier . DEC

    BC   shift, and go to state 91
    INC  shift, and go to state 92
    DEC  shift, and go to state 93


State 69

   32 para_stmt: IDENT ',' . para_stmt

    IDENT  shift, and go to state 41

    para_stmt  go to state 94


State 70

   28 proc_decl: PROC IDENT increase_level '(' para_list ')' . ';' get_globallocalswitch get_code_addr

    ';'  shift, and go to state 95


State 71

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl . $@3 stmt_sequence ';' return_stmt END decrease_level

    $default  reduce using rule 23 ($@3)

    $@3  go to state 96


State 72

   88 simple_expr: IDENT .

    $default  reduce using rule 88 (simple_expr)


State 73

   87 simple_expr: INTEGER .

    $default  reduce using rule 87 (simple_expr)


State 74

   71 expr: ODD . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 97


State 75

   78 simple_expr: '-' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 98


State 76

   85 simple_expr: '(' . expr ')'

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 99
    simple_expr  go to state 79


State 77

   86 simple_expr: call_stmt .

    $default  reduce using rule 86 (simple_expr)


State 78

   52 if_stmt_no_else: IF expr . get_code_addr @6 THEN stmt_sequence ';'

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 100


State 79

   70 expr: simple_expr .
   72     | simple_expr . EQ simple_expr
   73     | simple_expr . NE simple_expr
   74     | simple_expr . LT simple_expr
   75     | simple_expr . GE simple_expr
   76     | simple_expr . GT simple_expr
   77     | simple_expr . LE simple_expr
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    GT   shift, and go to state 102
    LT   shift, and go to state 103
    GE   shift, and go to state 104
    LE   shift, and go to state 105
    EQ   shift, and go to state 106
    NE   shift, and go to state 107
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 70 (expr)


State 80

   53 repeat_stmt: REPEAT get_code_addr . stmt_sequence ';' UNTIL expr

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 113
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 81

   57 read_stmt: READ identifier .

    $default  reduce using rule 57 (read_stmt)


State 82

   58 write_stmt: WRITE expr .

    $default  reduce using rule 58 (write_stmt)


State 83

   65 call_stmt: CALL get_table_addr . proc_identifier '(' arg_list ')'

    IDENT  shift, and go to state 114

    proc_identifier  go to state 115


State 84

   60 while_stmt: WHILE get_code_addr . expr get_code_addr $@7 DO MYBEGIN stmt_sequence END

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 116
    simple_expr  go to state 79


State 85

   61 dowhile_stmt: DO get_code_addr . stmt_sequence WHILE expr

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 117
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 86

   64 for_stmt: FOR '(' . assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    IDENT  shift, and go to state 45

    assign_stmt  go to state 118
    identifier   go to state 68


State 87

   27 return_stmt: $@4 RET . expr ';'

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 119
    simple_expr  go to state 79


State 88

   36 stmt_sequence: stmt_sequence ';' . statement

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 89

   48 if_stmt: if_stmt_no_else END .

    $default  reduce using rule 48 (if_stmt)


State 90

   50 if_stmt: if_stmt_no_else get_code_addr . $@5 ELSE stmt_sequence ';' END

    $default  reduce using rule 49 ($@5)

    $@5  go to state 121


State 91

   54 assign_stmt: identifier BC . expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 122
    simple_expr  go to state 79


State 92

   55 assign_stmt: identifier INC .

    $default  reduce using rule 55 (assign_stmt)


State 93

   56 assign_stmt: identifier DEC .

    $default  reduce using rule 56 (assign_stmt)


State 94

   32 para_stmt: IDENT ',' para_stmt .

    $default  reduce using rule 32 (para_stmt)


State 95

   28 proc_decl: PROC IDENT increase_level '(' para_list ')' ';' . get_globallocalswitch get_code_addr

    $default  reduce using rule 10 (get_globallocalswitch)

    get_globallocalswitch  go to state 123


State 96

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 . stmt_sequence ';' return_stmt END decrease_level

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 124
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 97

   71 expr: ODD simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 71 (expr)


State 98

   78 simple_expr: '-' simple_expr .
   79            | simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    $default  reduce using rule 78 (simple_expr)


State 99

   85 simple_expr: '(' expr . ')'

    ')'  shift, and go to state 125


State 100

   52 if_stmt_no_else: IF expr get_code_addr . @6 THEN stmt_sequence ';'

    $default  reduce using rule 51 (@6)

    @6  go to state 126


State 101

   84 simple_expr: simple_expr XOR . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 127


State 102

   76 expr: simple_expr GT . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 128


State 103

   74 expr: simple_expr LT . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 129


State 104

   75 expr: simple_expr GE . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 130


State 105

   77 expr: simple_expr LE . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 131


State 106

   72 expr: simple_expr EQ . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 132


State 107

   73 expr: simple_expr NE . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 133


State 108

   79 simple_expr: simple_expr '+' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 134


State 109

   80 simple_expr: simple_expr '-' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 135


State 110

   81 simple_expr: simple_expr '*' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 136


State 111

   82 simple_expr: simple_expr '/' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 137


State 112

   83 simple_expr: simple_expr '%' . simple_expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    simple_expr  go to state 138


State 113

   36 stmt_sequence: stmt_sequence . ';' statement
   53 repeat_stmt: REPEAT get_code_addr stmt_sequence . ';' UNTIL expr

    ';'  shift, and go to state 139


State 114

   90 proc_identifier: IDENT .

    $default  reduce using rule 90 (proc_identifier)


State 115

   65 call_stmt: CALL get_table_addr proc_identifier . '(' arg_list ')'

    '('  shift, and go to state 140


State 116

   60 while_stmt: WHILE get_code_addr expr . get_code_addr $@7 DO MYBEGIN stmt_sequence END

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 141


State 117

   36 stmt_sequence: stmt_sequence . ';' statement
   61 dowhile_stmt: DO get_code_addr stmt_sequence . WHILE expr

    WHILE  shift, and go to state 142
    ';'    shift, and go to state 88


State 118

   64 for_stmt: FOR '(' assign_stmt . ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    ';'  shift, and go to state 143


State 119

   27 return_stmt: $@4 RET expr . ';'

    ';'  shift, and go to state 144


State 120

   36 stmt_sequence: stmt_sequence ';' statement .

    $default  reduce using rule 36 (stmt_sequence)


State 121

   50 if_stmt: if_stmt_no_else get_code_addr $@5 . ELSE stmt_sequence ';' END

    ELSE  shift, and go to state 145


State 122

   54 assign_stmt: identifier BC expr .

    $default  reduce using rule 54 (assign_stmt)


State 123

   28 proc_decl: PROC IDENT increase_level '(' para_list ')' ';' get_globallocalswitch . get_code_addr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 146


State 124

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence . ';' return_stmt END decrease_level
   36 stmt_sequence: stmt_sequence . ';' statement

    ';'  shift, and go to state 147


State 125

   85 simple_expr: '(' expr ')' .

    $default  reduce using rule 85 (simple_expr)


State 126

   52 if_stmt_no_else: IF expr get_code_addr @6 . THEN stmt_sequence ';'

    THEN  shift, and go to state 148


State 127

   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr
   84            | simple_expr XOR simple_expr .

    $default  reduce using rule 84 (simple_expr)


State 128

   76 expr: simple_expr GT simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 76 (expr)


State 129

   74 expr: simple_expr LT simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 74 (expr)


State 130

   75 expr: simple_expr GE simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 75 (expr)


State 131

   77 expr: simple_expr LE simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 77 (expr)


State 132

   72 expr: simple_expr EQ simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 72 (expr)


State 133

   73 expr: simple_expr NE simple_expr .
   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '+'  shift, and go to state 108
    '-'  shift, and go to state 109
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 73 (expr)


State 134

   79 simple_expr: simple_expr . '+' simple_expr
   79            | simple_expr '+' simple_expr .
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 79 (simple_expr)


State 135

   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   80            | simple_expr '-' simple_expr .
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101
    '*'  shift, and go to state 110
    '/'  shift, and go to state 111
    '%'  shift, and go to state 112

    $default  reduce using rule 80 (simple_expr)


State 136

   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   81            | simple_expr '*' simple_expr .
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101

    $default  reduce using rule 81 (simple_expr)


State 137

   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   82            | simple_expr '/' simple_expr .
   83            | simple_expr . '%' simple_expr
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101

    $default  reduce using rule 82 (simple_expr)


State 138

   79 simple_expr: simple_expr . '+' simple_expr
   80            | simple_expr . '-' simple_expr
   81            | simple_expr . '*' simple_expr
   82            | simple_expr . '/' simple_expr
   83            | simple_expr . '%' simple_expr
   83            | simple_expr '%' simple_expr .
   84            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 101

    $default  reduce using rule 83 (simple_expr)


State 139

   36 stmt_sequence: stmt_sequence ';' . statement
   53 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' . UNTIL expr

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    UNTIL   shift, and go to state 149
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 140

   65 call_stmt: CALL get_table_addr proc_identifier '(' . arg_list ')'

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    $default  reduce using rule 67 (arg_list)

    call_stmt    go to state 77
    arg_list     go to state 150
    arg_stmt     go to state 151
    expr         go to state 152
    simple_expr  go to state 79


State 141

   60 while_stmt: WHILE get_code_addr expr get_code_addr . $@7 DO MYBEGIN stmt_sequence END

    $default  reduce using rule 59 ($@7)

    $@7  go to state 153


State 142

   61 dowhile_stmt: DO get_code_addr stmt_sequence WHILE . expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 154
    simple_expr  go to state 79


State 143

   64 for_stmt: FOR '(' assign_stmt ';' . get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 155


State 144

   27 return_stmt: $@4 RET expr ';' .

    $default  reduce using rule 27 (return_stmt)


State 145

   50 if_stmt: if_stmt_no_else get_code_addr $@5 ELSE . stmt_sequence ';' END

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 156
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 146

   28 proc_decl: PROC IDENT increase_level '(' para_list ')' ';' get_globallocalswitch get_code_addr .

    $default  reduce using rule 28 (proc_decl)


State 147

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' . return_stmt END decrease_level
   36 stmt_sequence: stmt_sequence ';' . statement

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 157
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 148

   52 if_stmt_no_else: IF expr get_code_addr @6 THEN . stmt_sequence ';'

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 158
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 149

   53 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL . expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 159
    simple_expr  go to state 79


State 150

   65 call_stmt: CALL get_table_addr proc_identifier '(' arg_list . ')'

    ')'  shift, and go to state 160


State 151

   66 arg_list: arg_stmt .
   69 arg_stmt: arg_stmt . ',' expr

    ','  shift, and go to state 161

    $default  reduce using rule 66 (arg_list)


State 152

   68 arg_stmt: expr .

    $default  reduce using rule 68 (arg_stmt)


State 153

   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 . DO MYBEGIN stmt_sequence END

    DO  shift, and go to state 162


State 154

   61 dowhile_stmt: DO get_code_addr stmt_sequence WHILE expr .

    $default  reduce using rule 61 (dowhile_stmt)


State 155

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr . expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 163
    simple_expr  go to state 79


State 156

   36 stmt_sequence: stmt_sequence . ';' statement
   50 if_stmt: if_stmt_no_else get_code_addr $@5 ELSE stmt_sequence . ';' END

    ';'  shift, and go to state 164


State 157

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt . END decrease_level
   46 statement: return_stmt .

    END  shift, and go to state 165

    $default  reduce using rule 46 (statement)


State 158

   36 stmt_sequence: stmt_sequence . ';' statement
   52 if_stmt_no_else: IF expr get_code_addr @6 THEN stmt_sequence . ';'

    ';'  shift, and go to state 166


State 159

   53 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL expr .

    $default  reduce using rule 53 (repeat_stmt)


State 160

   65 call_stmt: CALL get_table_addr proc_identifier '(' arg_list ')' .

    $default  reduce using rule 65 (call_stmt)


State 161

   69 arg_stmt: arg_stmt ',' . expr

    IDENT    shift, and go to state 72
    INTEGER  shift, and go to state 73
    CALL     shift, and go to state 50
    ODD      shift, and go to state 74
    '-'      shift, and go to state 75
    '('      shift, and go to state 76

    call_stmt    go to state 77
    expr         go to state 167
    simple_expr  go to state 79


State 162

   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 DO . MYBEGIN stmt_sequence END

    MYBEGIN  shift, and go to state 168


State 163

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr . get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 169


State 164

   36 stmt_sequence: stmt_sequence ';' . statement
   50 if_stmt: if_stmt_no_else get_code_addr $@5 ELSE stmt_sequence ';' . END

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    END     shift, and go to state 170
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 165

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END . decrease_level

    $default  reduce using rule 34 (decrease_level)

    decrease_level  go to state 171


State 166

   36 stmt_sequence: stmt_sequence ';' . statement
   52 if_stmt_no_else: IF expr get_code_addr @6 THEN stmt_sequence ';' .

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    RET       reduce using rule 26 ($@4)
    $default  reduce using rule 52 (if_stmt_no_else)

    return_stmt      go to state 54
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 167

   69 arg_stmt: arg_stmt ',' expr .

    $default  reduce using rule 69 (arg_stmt)


State 168

   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 DO MYBEGIN . stmt_sequence END

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 172
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 169

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr . $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    $default  reduce using rule 62 ($@8)

    $@8  go to state 173


State 170

   50 if_stmt: if_stmt_no_else get_code_addr $@5 ELSE stmt_sequence ';' END .

    $default  reduce using rule 50 (if_stmt)


State 171

   24 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level .

    $default  reduce using rule 24 (proc_decls)


State 172

   36 stmt_sequence: stmt_sequence . ';' statement
   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 DO MYBEGIN stmt_sequence . END

    END  shift, and go to state 174
    ';'  shift, and go to state 88


State 173

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 . ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    ';'  shift, and go to state 175


State 174

   60 while_stmt: WHILE get_code_addr expr get_code_addr $@7 DO MYBEGIN stmt_sequence END .

    $default  reduce using rule 60 (while_stmt)


State 175

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' . assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    IDENT  shift, and go to state 45

    assign_stmt  go to state 176
    identifier   go to state 68


State 176

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt . $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    $default  reduce using rule 63 ($@9)

    $@9  go to state 177


State 177

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 . ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    ')'  shift, and go to state 178


State 178

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' . get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 179


State 179

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr . MYBEGIN stmt_sequence ';' END get_code_addr

    MYBEGIN  shift, and go to state 180


State 180

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN . stmt_sequence ';' END get_code_addr

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    stmt_sequence    go to state 181
    statement        go to state 57
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 181

   36 stmt_sequence: stmt_sequence . ';' statement
   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence . ';' END get_code_addr

    ';'  shift, and go to state 182


State 182

   36 stmt_sequence: stmt_sequence ';' . statement
   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' . END get_code_addr

    IDENT   shift, and go to state 45
    IF      shift, and go to state 46
    END     shift, and go to state 183
    REPEAT  shift, and go to state 47
    READ    shift, and go to state 48
    WRITE   shift, and go to state 49
    CALL    shift, and go to state 50
    WHILE   shift, and go to state 51
    DO      shift, and go to state 52
    FOR     shift, and go to state 53

    $default  reduce using rule 26 ($@4)

    return_stmt      go to state 54
    $@4              go to state 55
    statement        go to state 120
    if_stmt          go to state 58
    if_stmt_no_else  go to state 59
    repeat_stmt      go to state 60
    assign_stmt      go to state 61
    read_stmt        go to state 62
    write_stmt       go to state 63
    while_stmt       go to state 64
    dowhile_stmt     go to state 65
    for_stmt         go to state 66
    call_stmt        go to state 67
    identifier       go to state 68


State 183

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END . get_code_addr

    $default  reduce using rule 6 (get_code_addr)

    get_code_addr  go to state 184


State 184

   64 for_stmt: FOR '(' assign_stmt ';' get_code_addr expr get_code_addr $@8 ';' assign_stmt $@9 ')' get_code_addr MYBEGIN stmt_sequence ';' END get_code_addr .

    $default  reduce using rule 64 (for_stmt)
