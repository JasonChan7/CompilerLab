Terminals unused in grammar

   IFX


State 6 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence

    4 get_code_addr: %empty

    5 get_table_addr: %empty

    6 open_globallocalswitch: %empty

    7 close_globallocalswitch: %empty

    8 proc_predecls: proc_predecls proc_decl increase_procRecord decrease_level
    9              | %empty

   10 const_decl: CONST const_list ';'
   11           | %empty

   12 const_list: const_def
   13           | const_list ',' const_def

   14 const_def: IDENT BC INTEGER

   15 var_decl: VAR var_list ';'
   16         | %empty

   17 var_list: var_def
   18         | var_list ',' var_def

   19 var_def: IDENT

   20 $@3: %empty

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level
   22           | %empty

   23 return_stmt: RET expr ';'

   24 proc_decl: PROC IDENT increase_level '(' para_list ')' ';'

   25 para_list: para_stmt
   26          | %empty

   27 para_stmt: IDENT
   28          | IDENT ',' para_stmt

   29 increase_procRecord: %empty

   30 decrease_level: %empty

   31 increase_level: %empty

   32 stmt_sequence: stmt_sequence ';' statement
   33              | statement

   34 statement: if_stmt
   35          | repeat_stmt
   36          | assign_stmt
   37          | read_stmt
   38          | write_stmt
   39          | while_stmt
   40          | call_stmt

   41 if_stmt: if_stmt_no_else END

   42 $@4: %empty

   43 if_stmt: if_stmt_no_else get_code_addr $@4 ELSE stmt_sequence ';' END

   44 @5: %empty

   45 if_stmt_no_else: IF expr get_code_addr @5 THEN stmt_sequence ';'

   46 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL expr

   47 assign_stmt: identifier BC expr
   48            | identifier BC call_stmt

   49 read_stmt: READ identifier

   50 write_stmt: WRITE expr

   51 $@6: %empty

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

   53 call_stmt: CALL get_table_addr proc_identifier '(' arg_list ')'

   54 arg_list: arg_stmt
   55         | %empty

   56 arg_stmt: identifier
   57         | arg_stmt ',' identifier

   58 expr: simple_expr
   59     | ODD simple_expr
   60     | simple_expr EQ simple_expr
   61     | simple_expr NE simple_expr
   62     | simple_expr LT simple_expr
   63     | simple_expr GE simple_expr
   64     | simple_expr GT simple_expr
   65     | simple_expr LE simple_expr

   66 simple_expr: '-' simple_expr
   67            | simple_expr '+' simple_expr
   68            | simple_expr '-' simple_expr
   69            | simple_expr '*' simple_expr
   70            | simple_expr '/' simple_expr
   71            | simple_expr '%' simple_expr
   72            | simple_expr XOR simple_expr
   73            | '(' expr ')'
   74            | INTEGER
   75            | IDENT

   76 identifier: IDENT

   77 proc_identifier: IDENT


Terminals, with rules where they appear

$end (0) 0
'%' (37) 71
'(' (40) 24 52 53 73
')' (41) 24 52 53 73
'*' (42) 69
'+' (43) 67
',' (44) 13 18 28 57
'-' (45) 66 68
'/' (47) 70
';' (59) 10 15 21 23 24 32 43 45 46 52
error (256)
IDENT (258) 14 19 24 27 28 75 76 77
INTEGER (259) 14 74
IF (260) 45
THEN (261) 45
ELSE (262) 43
END (263) 21 41 43 52
REPEAT (264) 46
UNTIL (265) 46
READ (266) 49
WRITE (267) 50
CALL (268) 53
CONST (269) 10
VAR (270) 15
MYBEGIN (271) 21 52
XOR (272) 72
ODD (273) 59
PROC (274) 24
WHILE (275) 52
DO (276) 52
RET (277) 23
IFX (278)
BC (279) 14 47 48
GT (280) 64
LT (281) 62
GE (282) 63
LE (283) 65
EQ (284) 60
NE (285) 61
UMINUS (286)


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 3, on right: 0
$@1 (43)
    on left: 1, on right: 3
$@2 (44)
    on left: 2, on right: 3
get_code_addr (45)
    on left: 4, on right: 3 43 45 46 52
get_table_addr (46)
    on left: 5, on right: 53
open_globallocalswitch (47)
    on left: 6, on right: 3
close_globallocalswitch (48)
    on left: 7, on right: 3
proc_predecls (49)
    on left: 8 9, on right: 3 8
const_decl (50)
    on left: 10 11, on right: 3 21
const_list (51)
    on left: 12 13, on right: 10 13
const_def (52)
    on left: 14, on right: 12 13
var_decl (53)
    on left: 15 16, on right: 3 21
var_list (54)
    on left: 17 18, on right: 15 18
var_def (55)
    on left: 19, on right: 17 18
proc_decls (56)
    on left: 21 22, on right: 3 21
$@3 (57)
    on left: 20, on right: 21
return_stmt (58)
    on left: 23, on right: 21
proc_decl (59)
    on left: 24, on right: 8 21
para_list (60)
    on left: 25 26, on right: 24
para_stmt (61)
    on left: 27 28, on right: 25 28
increase_procRecord (62)
    on left: 29, on right: 8
decrease_level (63)
    on left: 30, on right: 8 21
increase_level (64)
    on left: 31, on right: 24
stmt_sequence (65)
    on left: 32 33, on right: 3 21 32 43 45 46 52
statement (66)
    on left: 34 35 36 37 38 39 40, on right: 32 33
if_stmt (67)
    on left: 41 43, on right: 34
$@4 (68)
    on left: 42, on right: 43
if_stmt_no_else (69)
    on left: 45, on right: 41 43
@5 (70)
    on left: 44, on right: 45
repeat_stmt (71)
    on left: 46, on right: 35
assign_stmt (72)
    on left: 47 48, on right: 36
read_stmt (73)
    on left: 49, on right: 37
write_stmt (74)
    on left: 50, on right: 38
while_stmt (75)
    on left: 52, on right: 39
$@6 (76)
    on left: 51, on right: 52
call_stmt (77)
    on left: 53, on right: 40 48
arg_list (78)
    on left: 54 55, on right: 53
arg_stmt (79)
    on left: 56 57, on right: 54 57
expr (80)
    on left: 58 59 60 61 62 63 64 65, on right: 23 45 46 47 50 52 73
simple_expr (81)
    on left: 66 67 68 69 70 71 72 73 74 75, on right: 58 59 60 61 62
    63 64 65 66 67 68 69 70 71 72
identifier (82)
    on left: 76, on right: 47 48 49 56 57
proc_identifier (83)
    on left: 77, on right: 53


State 0

    0 $accept: . program $end

    $default  reduce using rule 4 (get_code_addr)

    program        go to state 1
    get_code_addr  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: get_code_addr . $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence

    $default  reduce using rule 1 ($@1)

    $@1  go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: get_code_addr $@1 . open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence

    $default  reduce using rule 6 (open_globallocalswitch)

    open_globallocalswitch  go to state 5


State 5

    3 program: get_code_addr $@1 open_globallocalswitch . proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence

    $default  reduce using rule 9 (proc_predecls)

    proc_predecls  go to state 6


State 6

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls . const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence
    8 proc_predecls: proc_predecls . proc_decl increase_procRecord decrease_level

    CONST  shift, and go to state 7
    PROC   shift, and go to state 8

    PROC      [reduce using rule 11 (const_decl)]
    $default  reduce using rule 11 (const_decl)

    const_decl  go to state 9
    proc_decl   go to state 10


State 7

   10 const_decl: CONST . const_list ';'

    IDENT  shift, and go to state 11

    const_list  go to state 12
    const_def   go to state 13


State 8

   24 proc_decl: PROC . IDENT increase_level '(' para_list ')' ';'

    IDENT  shift, and go to state 14


State 9

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl . var_decl close_globallocalswitch proc_decls $@2 stmt_sequence

    VAR  shift, and go to state 15

    $default  reduce using rule 16 (var_decl)

    var_decl  go to state 16


State 10

    8 proc_predecls: proc_predecls proc_decl . increase_procRecord decrease_level

    $default  reduce using rule 29 (increase_procRecord)

    increase_procRecord  go to state 17


State 11

   14 const_def: IDENT . BC INTEGER

    BC  shift, and go to state 18


State 12

   10 const_decl: CONST const_list . ';'
   13 const_list: const_list . ',' const_def

    ';'  shift, and go to state 19
    ','  shift, and go to state 20


State 13

   12 const_list: const_def .

    $default  reduce using rule 12 (const_list)


State 14

   24 proc_decl: PROC IDENT . increase_level '(' para_list ')' ';'

    $default  reduce using rule 31 (increase_level)

    increase_level  go to state 21


State 15

   15 var_decl: VAR . var_list ';'

    IDENT  shift, and go to state 22

    var_list  go to state 23
    var_def   go to state 24


State 16

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl . close_globallocalswitch proc_decls $@2 stmt_sequence

    $default  reduce using rule 7 (close_globallocalswitch)

    close_globallocalswitch  go to state 25


State 17

    8 proc_predecls: proc_predecls proc_decl increase_procRecord . decrease_level

    $default  reduce using rule 30 (decrease_level)

    decrease_level  go to state 26


State 18

   14 const_def: IDENT BC . INTEGER

    INTEGER  shift, and go to state 27


State 19

   10 const_decl: CONST const_list ';' .

    $default  reduce using rule 10 (const_decl)


State 20

   13 const_list: const_list ',' . const_def

    IDENT  shift, and go to state 11

    const_def  go to state 28


State 21

   24 proc_decl: PROC IDENT increase_level . '(' para_list ')' ';'

    '('  shift, and go to state 29


State 22

   19 var_def: IDENT .

    $default  reduce using rule 19 (var_def)


State 23

   15 var_decl: VAR var_list . ';'
   18 var_list: var_list . ',' var_def

    ';'  shift, and go to state 30
    ','  shift, and go to state 31


State 24

   17 var_list: var_def .

    $default  reduce using rule 17 (var_list)


State 25

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch . proc_decls $@2 stmt_sequence

    $default  reduce using rule 22 (proc_decls)

    proc_decls  go to state 32


State 26

    8 proc_predecls: proc_predecls proc_decl increase_procRecord decrease_level .

    $default  reduce using rule 8 (proc_predecls)


State 27

   14 const_def: IDENT BC INTEGER .

    $default  reduce using rule 14 (const_def)


State 28

   13 const_list: const_list ',' const_def .

    $default  reduce using rule 13 (const_list)


State 29

   24 proc_decl: PROC IDENT increase_level '(' . para_list ')' ';'

    IDENT  shift, and go to state 33

    $default  reduce using rule 26 (para_list)

    para_list  go to state 34
    para_stmt  go to state 35


State 30

   15 var_decl: VAR var_list ';' .

    $default  reduce using rule 15 (var_decl)


State 31

   18 var_list: var_list ',' . var_def

    IDENT  shift, and go to state 22

    var_def  go to state 36


State 32

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls . $@2 stmt_sequence
   21 proc_decls: proc_decls . proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    PROC  shift, and go to state 8

    $default  reduce using rule 2 ($@2)

    $@2        go to state 37
    proc_decl  go to state 38


State 33

   27 para_stmt: IDENT .
   28          | IDENT . ',' para_stmt

    ','  shift, and go to state 39

    $default  reduce using rule 27 (para_stmt)


State 34

   24 proc_decl: PROC IDENT increase_level '(' para_list . ')' ';'

    ')'  shift, and go to state 40


State 35

   25 para_list: para_stmt .

    $default  reduce using rule 25 (para_list)


State 36

   18 var_list: var_list ',' var_def .

    $default  reduce using rule 18 (var_list)


State 37

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 . stmt_sequence

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 48
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 38

   21 proc_decls: proc_decls proc_decl . MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    MYBEGIN  shift, and go to state 59


State 39

   28 para_stmt: IDENT ',' . para_stmt

    IDENT  shift, and go to state 33

    para_stmt  go to state 60


State 40

   24 proc_decl: PROC IDENT increase_level '(' para_list ')' . ';'

    ';'  shift, and go to state 61


State 41

   76 identifier: IDENT .

    $default  reduce using rule 76 (identifier)


State 42

   45 if_stmt_no_else: IF . expr get_code_addr @5 THEN stmt_sequence ';'

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 67
    simple_expr  go to state 68


State 43

   46 repeat_stmt: REPEAT . get_code_addr stmt_sequence ';' UNTIL expr

    $default  reduce using rule 4 (get_code_addr)

    get_code_addr  go to state 69


State 44

   49 read_stmt: READ . identifier

    IDENT  shift, and go to state 41

    identifier  go to state 70


State 45

   50 write_stmt: WRITE . expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 71
    simple_expr  go to state 68


State 46

   53 call_stmt: CALL . get_table_addr proc_identifier '(' arg_list ')'

    $default  reduce using rule 5 (get_table_addr)

    get_table_addr  go to state 72


State 47

   52 while_stmt: WHILE . get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

    $default  reduce using rule 4 (get_code_addr)

    get_code_addr  go to state 73


State 48

    3 program: get_code_addr $@1 open_globallocalswitch proc_predecls const_decl var_decl close_globallocalswitch proc_decls $@2 stmt_sequence .
   32 stmt_sequence: stmt_sequence . ';' statement

    ';'  shift, and go to state 74

    $default  reduce using rule 3 (program)


State 49

   33 stmt_sequence: statement .

    $default  reduce using rule 33 (stmt_sequence)


State 50

   34 statement: if_stmt .

    $default  reduce using rule 34 (statement)


State 51

   41 if_stmt: if_stmt_no_else . END
   43        | if_stmt_no_else . get_code_addr $@4 ELSE stmt_sequence ';' END

    END  shift, and go to state 75

    $default  reduce using rule 4 (get_code_addr)

    get_code_addr  go to state 76


State 52

   35 statement: repeat_stmt .

    $default  reduce using rule 35 (statement)


State 53

   36 statement: assign_stmt .

    $default  reduce using rule 36 (statement)


State 54

   37 statement: read_stmt .

    $default  reduce using rule 37 (statement)


State 55

   38 statement: write_stmt .

    $default  reduce using rule 38 (statement)


State 56

   39 statement: while_stmt .

    $default  reduce using rule 39 (statement)


State 57

   40 statement: call_stmt .

    $default  reduce using rule 40 (statement)


State 58

   47 assign_stmt: identifier . BC expr
   48            | identifier . BC call_stmt

    BC  shift, and go to state 77


State 59

   21 proc_decls: proc_decls proc_decl MYBEGIN . const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    CONST  shift, and go to state 7

    $default  reduce using rule 11 (const_decl)

    const_decl  go to state 78


State 60

   28 para_stmt: IDENT ',' para_stmt .

    $default  reduce using rule 28 (para_stmt)


State 61

   24 proc_decl: PROC IDENT increase_level '(' para_list ')' ';' .

    $default  reduce using rule 24 (proc_decl)


State 62

   75 simple_expr: IDENT .

    $default  reduce using rule 75 (simple_expr)


State 63

   74 simple_expr: INTEGER .

    $default  reduce using rule 74 (simple_expr)


State 64

   59 expr: ODD . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 79


State 65

   66 simple_expr: '-' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 80


State 66

   73 simple_expr: '(' . expr ')'

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 81
    simple_expr  go to state 68


State 67

   45 if_stmt_no_else: IF expr . get_code_addr @5 THEN stmt_sequence ';'

    $default  reduce using rule 4 (get_code_addr)

    get_code_addr  go to state 82


State 68

   58 expr: simple_expr .
   60     | simple_expr . EQ simple_expr
   61     | simple_expr . NE simple_expr
   62     | simple_expr . LT simple_expr
   63     | simple_expr . GE simple_expr
   64     | simple_expr . GT simple_expr
   65     | simple_expr . LE simple_expr
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    GT   shift, and go to state 84
    LT   shift, and go to state 85
    GE   shift, and go to state 86
    LE   shift, and go to state 87
    EQ   shift, and go to state 88
    NE   shift, and go to state 89
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 58 (expr)


State 69

   46 repeat_stmt: REPEAT get_code_addr . stmt_sequence ';' UNTIL expr

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 95
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 70

   49 read_stmt: READ identifier .

    $default  reduce using rule 49 (read_stmt)


State 71

   50 write_stmt: WRITE expr .

    $default  reduce using rule 50 (write_stmt)


State 72

   53 call_stmt: CALL get_table_addr . proc_identifier '(' arg_list ')'

    IDENT  shift, and go to state 96

    proc_identifier  go to state 97


State 73

   52 while_stmt: WHILE get_code_addr . '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

    '('  shift, and go to state 98


State 74

   32 stmt_sequence: stmt_sequence ';' . statement

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 75

   41 if_stmt: if_stmt_no_else END .

    $default  reduce using rule 41 (if_stmt)


State 76

   43 if_stmt: if_stmt_no_else get_code_addr . $@4 ELSE stmt_sequence ';' END

    $default  reduce using rule 42 ($@4)

    $@4  go to state 100


State 77

   47 assign_stmt: identifier BC . expr
   48            | identifier BC . call_stmt

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    CALL     shift, and go to state 46
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    call_stmt    go to state 101
    expr         go to state 102
    simple_expr  go to state 68


State 78

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl . var_decl $@3 stmt_sequence ';' return_stmt END decrease_level

    VAR  shift, and go to state 15

    $default  reduce using rule 16 (var_decl)

    var_decl  go to state 103


State 79

   59 expr: ODD simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 59 (expr)


State 80

   66 simple_expr: '-' simple_expr .
   67            | simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    $default  reduce using rule 66 (simple_expr)


State 81

   73 simple_expr: '(' expr . ')'

    ')'  shift, and go to state 104


State 82

   45 if_stmt_no_else: IF expr get_code_addr . @5 THEN stmt_sequence ';'

    $default  reduce using rule 44 (@5)

    @5  go to state 105


State 83

   72 simple_expr: simple_expr XOR . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 106


State 84

   64 expr: simple_expr GT . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 107


State 85

   62 expr: simple_expr LT . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 108


State 86

   63 expr: simple_expr GE . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 109


State 87

   65 expr: simple_expr LE . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 110


State 88

   60 expr: simple_expr EQ . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 111


State 89

   61 expr: simple_expr NE . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 112


State 90

   67 simple_expr: simple_expr '+' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 113


State 91

   68 simple_expr: simple_expr '-' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 114


State 92

   69 simple_expr: simple_expr '*' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 115


State 93

   70 simple_expr: simple_expr '/' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 116


State 94

   71 simple_expr: simple_expr '%' . simple_expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    simple_expr  go to state 117


State 95

   32 stmt_sequence: stmt_sequence . ';' statement
   46 repeat_stmt: REPEAT get_code_addr stmt_sequence . ';' UNTIL expr

    ';'  shift, and go to state 118


State 96

   77 proc_identifier: IDENT .

    $default  reduce using rule 77 (proc_identifier)


State 97

   53 call_stmt: CALL get_table_addr proc_identifier . '(' arg_list ')'

    '('  shift, and go to state 119


State 98

   52 while_stmt: WHILE get_code_addr '(' . expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 120
    simple_expr  go to state 68


State 99

   32 stmt_sequence: stmt_sequence ';' statement .

    $default  reduce using rule 32 (stmt_sequence)


State 100

   43 if_stmt: if_stmt_no_else get_code_addr $@4 . ELSE stmt_sequence ';' END

    ELSE  shift, and go to state 121


State 101

   48 assign_stmt: identifier BC call_stmt .

    $default  reduce using rule 48 (assign_stmt)


State 102

   47 assign_stmt: identifier BC expr .

    $default  reduce using rule 47 (assign_stmt)


State 103

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl . $@3 stmt_sequence ';' return_stmt END decrease_level

    $default  reduce using rule 20 ($@3)

    $@3  go to state 122


State 104

   73 simple_expr: '(' expr ')' .

    $default  reduce using rule 73 (simple_expr)


State 105

   45 if_stmt_no_else: IF expr get_code_addr @5 . THEN stmt_sequence ';'

    THEN  shift, and go to state 123


State 106

   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr
   72            | simple_expr XOR simple_expr .

    $default  reduce using rule 72 (simple_expr)


State 107

   64 expr: simple_expr GT simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 64 (expr)


State 108

   62 expr: simple_expr LT simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 62 (expr)


State 109

   63 expr: simple_expr GE simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 63 (expr)


State 110

   65 expr: simple_expr LE simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 65 (expr)


State 111

   60 expr: simple_expr EQ simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 60 (expr)


State 112

   61 expr: simple_expr NE simple_expr .
   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '+'  shift, and go to state 90
    '-'  shift, and go to state 91
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 61 (expr)


State 113

   67 simple_expr: simple_expr . '+' simple_expr
   67            | simple_expr '+' simple_expr .
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 67 (simple_expr)


State 114

   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   68            | simple_expr '-' simple_expr .
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83
    '*'  shift, and go to state 92
    '/'  shift, and go to state 93
    '%'  shift, and go to state 94

    $default  reduce using rule 68 (simple_expr)


State 115

   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   69            | simple_expr '*' simple_expr .
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83

    $default  reduce using rule 69 (simple_expr)


State 116

   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   70            | simple_expr '/' simple_expr .
   71            | simple_expr . '%' simple_expr
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83

    $default  reduce using rule 70 (simple_expr)


State 117

   67 simple_expr: simple_expr . '+' simple_expr
   68            | simple_expr . '-' simple_expr
   69            | simple_expr . '*' simple_expr
   70            | simple_expr . '/' simple_expr
   71            | simple_expr . '%' simple_expr
   71            | simple_expr '%' simple_expr .
   72            | simple_expr . XOR simple_expr

    XOR  shift, and go to state 83

    $default  reduce using rule 71 (simple_expr)


State 118

   32 stmt_sequence: stmt_sequence ';' . statement
   46 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' . UNTIL expr

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    UNTIL   shift, and go to state 124
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 119

   53 call_stmt: CALL get_table_addr proc_identifier '(' . arg_list ')'

    IDENT  shift, and go to state 41

    $default  reduce using rule 55 (arg_list)

    arg_list    go to state 125
    arg_stmt    go to state 126
    identifier  go to state 127


State 120

   52 while_stmt: WHILE get_code_addr '(' expr . ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

    ')'  shift, and go to state 128


State 121

   43 if_stmt: if_stmt_no_else get_code_addr $@4 ELSE . stmt_sequence ';' END

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 129
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 122

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 . stmt_sequence ';' return_stmt END decrease_level

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 130
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 123

   45 if_stmt_no_else: IF expr get_code_addr @5 THEN . stmt_sequence ';'

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 131
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 124

   46 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL . expr

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 132
    simple_expr  go to state 68


State 125

   53 call_stmt: CALL get_table_addr proc_identifier '(' arg_list . ')'

    ')'  shift, and go to state 133


State 126

   54 arg_list: arg_stmt .
   57 arg_stmt: arg_stmt . ',' identifier

    ','  shift, and go to state 134

    $default  reduce using rule 54 (arg_list)


State 127

   56 arg_stmt: identifier .

    $default  reduce using rule 56 (arg_stmt)


State 128

   52 while_stmt: WHILE get_code_addr '(' expr ')' . get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END

    $default  reduce using rule 4 (get_code_addr)

    get_code_addr  go to state 135


State 129

   32 stmt_sequence: stmt_sequence . ';' statement
   43 if_stmt: if_stmt_no_else get_code_addr $@4 ELSE stmt_sequence . ';' END

    ';'  shift, and go to state 136


State 130

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence . ';' return_stmt END decrease_level
   32 stmt_sequence: stmt_sequence . ';' statement

    ';'  shift, and go to state 137


State 131

   32 stmt_sequence: stmt_sequence . ';' statement
   45 if_stmt_no_else: IF expr get_code_addr @5 THEN stmt_sequence . ';'

    ';'  shift, and go to state 138


State 132

   46 repeat_stmt: REPEAT get_code_addr stmt_sequence ';' UNTIL expr .

    $default  reduce using rule 46 (repeat_stmt)


State 133

   53 call_stmt: CALL get_table_addr proc_identifier '(' arg_list ')' .

    $default  reduce using rule 53 (call_stmt)


State 134

   57 arg_stmt: arg_stmt ',' . identifier

    IDENT  shift, and go to state 41

    identifier  go to state 139


State 135

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr . $@6 DO MYBEGIN stmt_sequence ';' END

    $default  reduce using rule 51 ($@6)

    $@6  go to state 140


State 136

   32 stmt_sequence: stmt_sequence ';' . statement
   43 if_stmt: if_stmt_no_else get_code_addr $@4 ELSE stmt_sequence ';' . END

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    END     shift, and go to state 141
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 137

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' . return_stmt END decrease_level
   32 stmt_sequence: stmt_sequence ';' . statement

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47
    RET     shift, and go to state 142

    return_stmt      go to state 143
    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 138

   32 stmt_sequence: stmt_sequence ';' . statement
   45 if_stmt_no_else: IF expr get_code_addr @5 THEN stmt_sequence ';' .

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    $default  reduce using rule 45 (if_stmt_no_else)

    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 139

   57 arg_stmt: arg_stmt ',' identifier .

    $default  reduce using rule 57 (arg_stmt)


State 140

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 . DO MYBEGIN stmt_sequence ';' END

    DO  shift, and go to state 144


State 141

   43 if_stmt: if_stmt_no_else get_code_addr $@4 ELSE stmt_sequence ';' END .

    $default  reduce using rule 43 (if_stmt)


State 142

   23 return_stmt: RET . expr ';'

    IDENT    shift, and go to state 62
    INTEGER  shift, and go to state 63
    ODD      shift, and go to state 64
    '-'      shift, and go to state 65
    '('      shift, and go to state 66

    expr         go to state 145
    simple_expr  go to state 68


State 143

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt . END decrease_level

    END  shift, and go to state 146


State 144

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO . MYBEGIN stmt_sequence ';' END

    MYBEGIN  shift, and go to state 147


State 145

   23 return_stmt: RET expr . ';'

    ';'  shift, and go to state 148


State 146

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END . decrease_level

    $default  reduce using rule 30 (decrease_level)

    decrease_level  go to state 149


State 147

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN . stmt_sequence ';' END

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    stmt_sequence    go to state 150
    statement        go to state 49
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 148

   23 return_stmt: RET expr ';' .

    $default  reduce using rule 23 (return_stmt)


State 149

   21 proc_decls: proc_decls proc_decl MYBEGIN const_decl var_decl $@3 stmt_sequence ';' return_stmt END decrease_level .

    $default  reduce using rule 21 (proc_decls)


State 150

   32 stmt_sequence: stmt_sequence . ';' statement
   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence . ';' END

    ';'  shift, and go to state 151


State 151

   32 stmt_sequence: stmt_sequence ';' . statement
   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' . END

    IDENT   shift, and go to state 41
    IF      shift, and go to state 42
    END     shift, and go to state 152
    REPEAT  shift, and go to state 43
    READ    shift, and go to state 44
    WRITE   shift, and go to state 45
    CALL    shift, and go to state 46
    WHILE   shift, and go to state 47

    statement        go to state 99
    if_stmt          go to state 50
    if_stmt_no_else  go to state 51
    repeat_stmt      go to state 52
    assign_stmt      go to state 53
    read_stmt        go to state 54
    write_stmt       go to state 55
    while_stmt       go to state 56
    call_stmt        go to state 57
    identifier       go to state 58


State 152

   52 while_stmt: WHILE get_code_addr '(' expr ')' get_code_addr $@6 DO MYBEGIN stmt_sequence ';' END .

    $default  reduce using rule 52 (while_stmt)
